import {HomeAssistant} from "custom-card-helpers";

export namespace generic {
  /**
   * Home assistant entity.
   *
   * @property {string} name The name of this entity.
   * @property {string} original_name The original name of this entity.
   * @property {string} entity_id The id of this entity.
   * @property {string} device_id The id of the device to which this entity is linked.
   * @property {string} area_id The id of the area to which this entity is linked.
   * @property {string[]|null} disabled_by Indicates by what this entity is disabled.
   * @property {string[]|null} hidden_by Indicates by what this entity is hidden.
   */
  export interface hassEntity {
    area_id: string;
    device_id: string;
    disabled_by: string[] | null;
    entity_id: string;
    hidden_by: string[] | null;
    name: string;
    original_name: string;
  }

  /**
   * Device Entity.
   *
   * @property {string} area_id The Area which the device is placed in.
   * @property {string} id Unique ID of a device (generated by Home Assistant).
   * @property {string[] | null} disabled_by Indicates by what this entity is disabled.
   * @property {string[] | null} hidden_by Indicates by what this entity is hidden.
   */
  export interface deviceEntity {
    area_id: string;
    disabled_by: string[] | null;
    hidden_by: string[] | null;
    id: string;
  }

  /**
   * Area Entity.
   *
   * @property {string[]} [aliases] Array of aliases of this entity.
   * @property {string|null} area_id The id of this entity.
   * @property {string} name Name of this entity.
   * @property {string|null} picture URL to a picture that should be used instead of showing the domain icon.
   * @property {number} [order] Ordering position of the area in the list of available areas.
   * @property {boolean} [hidden] True if the entity should be hidden from the dashboard.
   *                              This property is added by the custom strategy.
   * @property {object[]} [extra_cards] An array of card configurations.
   *                                    The configured cards are added to the dashboard.
   *                                    This property is added by the custom strategy.
   * @property {string} [type=default] The type of area card.
   */
  export interface areaEntity {
    aliases?: string[];
    area_id: string | null;
    name: string;
    picture: string | null;
    order?: number;
    hidden?: boolean;
    extra_cards?: object[];
    type?: string;
  }

  /**
   * View Entity.
   *
   * This entity is added by the custom strategy.
   *
   * @property {string} title Title of the entity.
   * @property {string} icon Icon to use for the entity in the frontend.
   *                         Example: `mdi:home`.
   * @property {number} [order] Ordering position of the entity in the list of available views.
   * @property {boolean} [hidden] True if the entity should be hidden from the dashboard.
   */
  export interface viewEntity {
    hidden?: boolean;
    icon: string;
    order?: number;
    title: string;
  }

  /**
   * Domain Entity.
   *
   * This entity is added by the custom strategy.
   *
   * @property {number} [order] Ordering position of the entity in the list of available views.
   * @property {boolean} [hidden] True if the entity should be hidden from the dashboard.
   */
  export interface domainEntity extends titleCardOptions {
    hidden?: boolean;
    order?: number;
  }

  /**
   * Title Card options.
   *
   * @property {string} [title] Title to render, which may contain templates.
   * @property {string} [subtitle] Subtitle to render, which may contain templates.
   * @property {boolean} [showControls=true] False to hide controls.
   * @property {string} [iconOn] Icon to show for switching entities from off state.
   * @property {string} [iconOff] Icon to show for switching entities to off state.
   * @property {string} [onService=none] Service to call for switching entities from off state.
   * @property {string} [offService=none] Service to call for switching entities to off state.
   */
  export interface titleCardOptions {
    iconOff?: string;
    iconOn?: string;
    offService?: string;
    onService?: string;
    showControls?: boolean;
    subtitle?: string;
    title?: string;
  }

  /**
   * Dashboard Information Object.
   *
   * @property {LovelaceConfig} config User supplied dashboard configuration, if any.
   * @property {HomeAssistant} hass The Home Assistant object.
   * @property {boolean} narrow If the current user interface is rendered in narrow mode or not.
   *
   * @see https://developers.home-assistant.io/docs/frontend/custom-ui/custom-strategy/#dashboard-strategies
   */
  export interface dashBoardInfo {
    config?: LovelaceConfig;
    hass: HomeAssistant;
    narrow: boolean;
  }

  export interface LovelaceConfig {
    title?: string;
    strategy?: {
      type: string;
      [key: string]: any;
    };
    views: LovelaceViewConfig[];
    background?: string;
  }

  /**
   * View Information Object.
   *
   * @property {LovelaceConfig} config Dashboard configuration.
   * @property {Object} view Configuration of the current view.
   * @property {HomeAssistant} hass The Home Assistant object.
   * @property {boolean} narrow If the current user interface is rendered in narrow mode or not.
   *
   * @see https://developers.home-assistant.io/docs/frontend/custom-ui/custom-strategy/#view-strategies
   */
  export interface viewInfo {
    config: LovelaceConfig
    view: LovelaceViewConfig;
    hass: HomeAssistant;
    narrow: boolean;
  }

  export interface LovelaceViewConfig {
    index?: number;
    title?: string;
    type?: string;
    strategy?: {
      type: string;
      [key: string]: any;
    };
    badges?: Array<string | {
      type?: string;
      [key: string]: any;
    }>;
    cards?: {
      index?: number;
      view_index?: number;
      view_layout?: any;
      type: string;
      [key: string]: any;
    }[];
    path?: string;
    icon?: string;
    theme?: string;
    panel?: boolean;
    background?: string;
    visible?: boolean | {
      user?: string;
    }[];
    subview?: boolean;
    back_path?: string;
  }
  /**
   * Strategy configuration.
   *
   * @property {boolean} [debug] Set to true for more verbose debugging info.
   * @property {Object.<areaEntity>} areas List of areas.
   * @property {Object.<cardOptions>} [card_options] Card options for entities.
   * @property {Object.<viewEntity>} views List of views.
   * @property {Object.<domainEntity>} domains List of domains.
   * @property {chips} [chips] List of chips to show in the Home view.
   * @property {object[]} [quick_access_cards] List of cards to show between welcome card and rooms cards.
   * @property {object[]} [extra_cards] List of cards to show below room cards.
   * @property {object[]} [extra_views] List of views to add to the dashboard.
   */
  export interface strategyOptions {
    areas: { [p: string]: areaEntity };
    card_options?: { [p: string]: cardOptions };
    chips?: chips;
    debug?: boolean;
    domains: { [p: string]: domainEntity };
    extra_cards?: object[];
    extra_views?: object[];
    quick_access_cards?: object[];
    views: { [p: string]: viewEntity };
  }

  /**
   * List of chips to show in the Home view.
   *
   * @property {boolean} light_count Chip to display the number of lights on.
   * @property {boolean} fan_count Chip to display the number of fans on.
   * @property {boolean} cover_count Chip to display the number of unclosed covers.
   * @property {boolean} switch_count Chip to display the number of switches on.
   * @property {boolean} climate_count Chip to display the number of climates which are not off.
   * @property {string} weather_entity Entity ID for the weather chip to use, accepts `weather.` only.
   * @property {object[]} extra_chips List of extra chips.
   */
  export interface chips {
    [key: string]: any;

    light_count: boolean;
    fan_count: boolean;
    cover_count: boolean;
    switch_count: boolean;
    climate_count: boolean;
    weather_entity: string;
    extra_chips: object[];
  }


  /**
   * Custom card-configuration for an entity.
   *
   * @property {string} type Type of card for the entity
   * @property {boolean} hidden True if the entity should be hidden from the dashboard.
   */
  export interface cardOptions {
    hidden?: boolean;
    type?: string;
  }
  /**
   * Area Filter Context.
   *
   * @property {areaEntity} area Area Entity.
   * @property {string} domain Domain of the entity.
   *                           Example: `light`.
   * @property {string[]} areaDeviceIds The id of devices which are linked to the area entity.
   */
  export interface areaFilterContext {
    area: areaEntity;
    areaDeviceIds: string[];
    domain: string;
  }
}
